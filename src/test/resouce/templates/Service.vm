/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2014-2016 abel533@gmail.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package ${PackageName};

import com.github.pagehelper.PageHelper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import ${AllPackgeName}.mapper.${TableClassName}Mapper;
import ${AllPackgeName}.model.${TableClassName};

import java.util.List;

/**
 * @author $CreateMan
 * @since $Date
 */
@Service
public class ${TableClassName}Service implements I${TableClassName}Service{

    @SuppressWarnings("SpringJavaInjectionPointsAutowiringInspection")
    @Autowired
    private ${TableClassName}Mapper ${TableDownClassName}Mapper;

    @Override
    public List<${TableClassName}> getAll(${TableClassName} ${TableDownClassName}) {
        if (${TableDownClassName}.getPage() != null && ${TableDownClassName}.getRows() != null) {
            PageHelper.startPage(${TableDownClassName}.getPage(), ${TableDownClassName}.getRows());
        }
        return ${TableDownClassName}Mapper.selectAll();
    }

    @Override
    public ${TableClassName} getById(Integer id) {
        return ${TableDownClassName}Mapper.selectByPrimaryKey(id);
    }

    @Override
    public void deleteById(Integer id) {
        ${TableDownClassName}Mapper.deleteByPrimaryKey(id);
    }

    @Override
    public void save(${TableClassName} country) {
        if (country.getId() != null) {
            ${TableDownClassName}Mapper.updateByPrimaryKey(country);
        } else {
            ${TableDownClassName}Mapper.insert(country);
        }
    }
}
